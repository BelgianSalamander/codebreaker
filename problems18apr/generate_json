#!/usr/bin/env python3

import json

def problem_gen(ln, sn, d, ic, n):
    o = []
    for i in range(1,n+1):
        o.append({
            # The full name displayed on the web page.
            "long_name":ln + str(i),
            # The short name used in the URL.
            "short_name":sn + str(i),
            # The location of the code to be broken.
            "task_code":"%s/%d.cpp" % (d, i),
            # The location of the task's sanity checker.
            "sanity_exe":"%s/sanity" % (d),
            # The location of the code to break.
            "broken_exe":"%s/%d.cpp" % (d, i),
            # The location of the model solution to compare against.
            "correct_exe":"%s/correct.cpp" % (d),
            # The location of the output checker.
            "checker_exe":"%s/checker" % (d) if ic else "match_file"
        })
    return o

problems = []
problems.extend(problem_gen("Panorama ", "a-panorama-", "panorama", False, 3))
problems.extend(problem_gen("Scootchhop ", "b-scootchhop-", "scootchhop", False, 1))
problems.append({
    "long_name": "Scootchhop ST4",
    "short_name": "b-scootchhop-st4",
    "task_code": "scootchhop/st4.cpp",
    "sanity_exe": "scootchhop/sanity-st4",
    "broken_exe": "scootchhop/st4.cpp",
    "correct_exe": "scootchhop/correct.cpp",
    "checker_exe": "match_file"
})
problems.extend(problem_gen("Disappointment ", "c-disappointment-", "disappointment", False, 1))
problems.extend(problem_gen("Coloured Walkway ", "d-colour-", "coloured_walkway", False, 3))
problems.extend(problem_gen("SPOON ", "e-spoon-", "spoon", False, 2))
problems.extend(problem_gen("Statuettes ", "f-statuettes-", "statuettes", False, 1))

with open('problems.json', 'w') as f:
    f.write(json.dumps(problems, indent=4))
